0ms

int arrangeCoins(int n) {
        if (n == 0) return 0;
        int l = 1, r = n;
        long long m = l + (r-l)/2;
        while (l<=r) {
            m = l + (r-l)/2;
            if (n == (long long)(m*(m+1)/2)) return m;
            else if (n < (long long)(m*(m+1)/2)) r = m - 1;
            else if (n > (long long)(m*(m+1)/2)) l = m + 1;
        }
        long long left = l;
        if (n > (long long)(left*(left+1)/2)) return left;
        return r;
    }
    
/*Notes
Why does returning r work?
The binary search ensures that r will always point to the largest valid m such that m×(m+1)/2≤n when the loop finishes:

m is always less than or equal to r due to its construction "m = l + (r-l)/2"
when the loop finishes, it means l > r
    case 1: n < m*(m+1)/2 => r = m - 1;
        l > r => l > m - 1 = r
    case 2: n > m*(m+1)/2 => l = m + 1;
        l > r => m + 1 > r
    

By the time the binary search completes: r holds the largest number of complete rows that can be built with n coins.

*/