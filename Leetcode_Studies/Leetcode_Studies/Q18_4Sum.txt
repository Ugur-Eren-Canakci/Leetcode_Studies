31ms, O(n^2 log n) 

vector<vector<int>> fourSum(vector<int>& nums, int target) {
        if (nums.size() < 4) return {};
        
        vector<vector<int>> res;
        set<vector<int>> uniques;

        sort(nums.begin(), nums.end());

        if (nums[0] > 0 && target < 0) return {};
        else if (nums[nums.size()-1] < 0 && target > 0) return {};

        for (int i=0; i<nums.size()-3; i++) {
            for (int j=i+1; j<nums.size() - 2; j++) {
                int left = j+1, right = nums.size() - 1;
                while (left < right ) {
                    int last_left = nums[left], last_right = nums[right];
                    long sum = nums[i];
                    sum += nums[j];
                    sum += nums[left];
                    sum += nums[right];
                    
                    if (sum == target) {
                        uniques.insert(vector<int>{nums[i],nums[j],nums[left],nums[right]});
                        int last_left = nums[left], last_right = nums[right];
                        while (left < right && nums[left] == last_left) left++;
                        while (left < right && nums[right] == last_right) right--;
                    
                    } 
                    else if (sum < target) left++;
                    else right--;
                }
            }
        }
        
        for (const auto& el : uniques) res.push_back(el);
        return res;
    }

