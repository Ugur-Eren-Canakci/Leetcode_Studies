0ms

bool wordPattern(string pattern, string s) {
        if (s == "" && pattern == "") return true;

        vector<string> chars;
        auto it = pattern.begin();
        while (it != pattern.end()) {
            string str = "";
            str += *it;
            int count = 0;
            for (const auto& el : chars) {
                if (el == str) count++;
            }
            if (count <= chars.size()) chars.push_back(str);
            it++;
        }

        vector<string> words;
        it = s.begin();
        string word = "";
        while (it != s.end()) {
            if (*it != ' ') word += *it;
            else {
                int count = 0;
                for (const auto& el : words) {
                    if (el == word) count++;
                }
                if (count <= words.size()) words.push_back(word);
                word = "";
            }
            it++;
        }
        int count = 0;
        for (const auto& el : words) {
            if (el == word) count++;
        }
        if (count <= words.size()) words.push_back(word);
        
        if (chars.size() != words.size()) {
            return false;
        }
        
        map<string,string> matches;
        auto it_1 = chars.begin();
        auto it_2 = words.begin();
        while (it_1 != chars.end()) {
            matches[*it_1] = *it_2;
            it_1++;
            it_2++;
        }
        
        if (chars.size() > 1) {
            auto it_3 = matches.begin();
            while (it_3 != matches.end()) {
                auto it_4 = ++matches.begin();
                while (it_4 != matches.end()) {
                    if (it_3->second == it_4->second && it_3->first != it_4->first) {
                        return false;
                    }
                    it_4++;
                }
                it_3++;
            }    
        }

        string res = "";
        for (const auto& el : pattern) {
            string str = "";
            str += el;
            res += matches[str];
            res += ' ';
        }
        
        s += ' ';
        return s == res;
    }