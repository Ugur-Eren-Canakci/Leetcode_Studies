11ms, O(n logn)

int threeSumClosest(vector<int>& nums, int target) {
        if (nums.size() < 3) {
            int sum = 0;
            for (const auto& el : nums) sum += el;
            return sum; 
        }

        sort(nums.begin(), nums.end());
        int first_positive_index = -1;
        for (int i=0; i<nums.size(); i++) {
            if (nums[i] > 0) {
                first_positive_index = i;
                break;
            }
        }

        if (target > 0 && first_positive_index == -1) return nums[nums.size()-3] + nums[nums.size()-2] + nums[nums.size()-1];

        int closest_sum = nums[0] + nums[1] + nums[2];
        int smallest_dif = abs(closest_sum - target);

        for (int i=0; i<nums.size() - 2; i++) {
            int l = i+1, r = nums.size()-1;
            
            while (l < r) {
                int current_sum = nums[i] + nums[l] + nums[r];
                int current_dif = abs(current_sum - target);
                if (current_dif == 0) return current_sum;
                else if (current_dif < smallest_dif) {
                    closest_sum = current_sum;
                    smallest_dif = current_dif;
                }
                if (current_sum > target) r--;
                else if (current_sum < target) l++;
                else return current_sum;
            }
        }

        return closest_sum;
    }